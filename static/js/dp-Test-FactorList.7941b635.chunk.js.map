{"version":3,"file":"static/js/dp-Test-FactorList.7941b635.chunk.js","mappings":"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","sources":["modules/test/views/Test/FactorForm.js","modules/test/views/Test/FactorList.js","modules/test/views/Test/FactorResultForm.js","modules/test/views/Test/FactorResultList.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Drawer, message, Form, Row, Skeleton } from \"antd\";\r\nimport { CustomButton, FormItem } from \"components\";\r\nimport { getRequest, postRequest, putRequest } from \"api\";\r\nimport { test, dict } from \"api/endpoints\";\r\n\r\nfunction FactorForm({ visible, handleClose, factorId, refreshTable, testId }) {\r\n  const [form] = Form.useForm();\r\n  const [loading, setLoading] = useState(false);\r\n  const [factorType, setFactorType] = useState([]);\r\n  const [eStatus, setEStatus] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const getFactor = () => {\r\n      setLoading(true);\r\n      getRequest(`${test.factor}${factorId}`)\r\n        .then((res) => {\r\n          form.setFieldsValue(res.data);\r\n        })\r\n        .catch((error) => {\r\n          message.error(`Алдаа гарлаа. ${error.Message}`);\r\n        })\r\n        .finally(() => setLoading(false));\r\n    };\r\n\r\n    if (factorId !== null) getFactor();\r\n    // eslint-disable-next-line\r\n  }, [factorId]);\r\n\r\n  useEffect(() => {\r\n    const getEFactorTypes = async () => {\r\n      getRequest(`${dict.enum}/EFactorType`)\r\n        .then((res) => {\r\n          setFactorType(res.data);\r\n        })\r\n        .catch((error) => {\r\n          message.error(error.Message);\r\n        });\r\n    };\r\n\r\n    const getEStatus = async () => {\r\n      getRequest(`${dict.enum}/EStatus`)\r\n        .then((res) => {\r\n          setEStatus(res.data);\r\n        })\r\n        .catch((error) => {\r\n          message.error(error.Message);\r\n        });\r\n    };\r\n\r\n    getEFactorTypes();\r\n    getEStatus();\r\n  }, []);\r\n\r\n  const onSubmit = async () => {\r\n    form\r\n      .validateFields()\r\n      .then(async (values) => {\r\n        setLoading(true);\r\n        if (factorId) {\r\n          await putRequest(test.factor, {\r\n            ...values,\r\n            factorId: factorId,\r\n            testId: testId,\r\n          });\r\n        } else {\r\n          await postRequest(test.factor, {\r\n            ...values,\r\n            testId: testId,\r\n          });\r\n        }\r\n        message.success(\"Амжилттай хадгаллаа.\");\r\n        refreshTable();\r\n        setLoading(false);\r\n        handleClose();\r\n      })\r\n      .catch((error) => {\r\n        message.error(error.Message);\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  const setInitial = () => {\r\n    handleClose();\r\n    form.resetFields();\r\n  };\r\n\r\n  return (\r\n    <Drawer\r\n      visible={visible}\r\n      title={factorId ? \"Хүчин зүйл засах\" : \"Хүчин зүйл нэмэх\"}\r\n      placement={\"right\"}\r\n      closable={false}\r\n      onClose={setInitial}\r\n      width={400}\r\n      footer={\r\n        <div style={{ textAlign: \"right\" }}>\r\n          <CustomButton onClick={() => onSubmit()} />\r\n        </div>\r\n      }\r\n      key={\"factor\"}\r\n    >\r\n      <Skeleton loading={loading}>\r\n        <Form\r\n          layout=\"vertical\"\r\n          hideRequiredMark\r\n          // size=\"small\"\r\n          scrollToFirstError\r\n          form={form}\r\n        >\r\n          <Row justify=\"center\" gutter={32}>\r\n            <FormItem label=\"Нэр\" name={\"name\"} required />\r\n            <FormItem\r\n              itemType=\"select\"\r\n              label=\"Хүчин зүйлийн төрөл\"\r\n              name={\"factorType\"}\r\n              dtsrc={factorType}\r\n              required\r\n            />\r\n            <FormItem\r\n              label=\"Боломжит оноо\"\r\n              name={\"scorePossible\"}\r\n              itemType=\"number\"\r\n              required\r\n            />\r\n            <FormItem\r\n              label=\"Эрэмбэ\"\r\n              name={\"orderNo\"}\r\n              itemType=\"number\"\r\n              required\r\n            />\r\n            <FormItem\r\n              itemType=\"select\"\r\n              label=\"Төлөв\"\r\n              name={\"status\"}\r\n              dtsrc={eStatus}\r\n              required\r\n            />\r\n          </Row>\r\n        </Form>\r\n      </Skeleton>\r\n    </Drawer>\r\n  );\r\n}\r\n\r\nexport default FactorForm;\r\n","import React, { useState } from \"react\";\r\nimport { Tag } from \"antd\";\r\nimport { CustomTable } from \"components\";\r\nimport { test } from \"api/endpoints\";\r\nimport FactorForm from \"./FactorForm\";\r\nimport FactorResultList from \"./FactorResultList\";\r\n\r\nfunction FactorList({ refresh, setRefresh, testId }) {\r\n  const [factorForm, setFactorForm] = useState({\r\n    visible: false,\r\n    factorId: null,\r\n  });\r\n\r\n  const columns = [\r\n    // {\r\n    //   title: \"Код\",\r\n    //   textAlign: \"center\",\r\n    //   dataIndex: \"factorId\",\r\n    // },\r\n    {\r\n      title: \"Нэр\",\r\n      dataIndex: \"name\",\r\n    },\r\n    {\r\n      title: \"Хүчин зүйлийн төрөл\",\r\n      textAlign: \"left\",\r\n      dataIndex: \"factorType\",\r\n    },\r\n    {\r\n      title: \"Боломжит оноо\",\r\n      textAlign: \"center\",\r\n      dataIndex: \"scorePossible\",\r\n    },\r\n    {\r\n      title: \"Эрэмбэ\",\r\n      textAlign: \"center\",\r\n      dataIndex: \"orderNo\",\r\n    },\r\n    {\r\n      title: \"Төлөв\",\r\n      dataIndex: \"status\",\r\n      render: (val) =>\r\n        val === \"A\" ? (\r\n          <Tag color=\"blue\">Идэвхтэй</Tag>\r\n        ) : val === \"I\" ? (\r\n          <Tag color=\"red\">Идэвхгүй</Tag>\r\n        ) : null,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <CustomTable\r\n        title={\"Хүчин зүйлсийн жагсаалт\"}\r\n        primaryKey={[\"factorId\"]}\r\n        columns={columns}\r\n        endpoint={test.factor}\r\n        endpoints={test.factors}\r\n        addFunc={() => setFactorForm({ factorId: null, visible: true })}\r\n        onEdit={(val) => setFactorForm({ factorId: val, visible: true })}\r\n        refresh={refresh}\r\n        expandable={{\r\n          expandedRowRender: (record) => (\r\n            <FactorResultList factorId={record.factorId} />\r\n          ),\r\n          // rowExpandable: (record) => record.questionType !== \"Write\",\r\n        }}\r\n        rowKey={(record) => record.factorId}\r\n      />\r\n      <FactorForm\r\n        visible={factorForm.visible}\r\n        factorId={factorForm.factorId}\r\n        handleClose={() => setFactorForm({ factorId: null, visible: false })}\r\n        refreshTable={setRefresh}\r\n        testId={testId}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default FactorList;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Drawer, message, Form, Row, Skeleton } from \"antd\";\r\nimport { CustomButton, FormItem } from \"components\";\r\nimport { getRequest, postRequest, putRequest } from \"api\";\r\nimport { test } from \"api/endpoints\";\r\n\r\nfunction FactorResultForm({\r\n  visible,\r\n  factorId,\r\n  resultId,\r\n  handleClose,\r\n  refreshTable,\r\n}) {\r\n  const [form] = Form.useForm();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const getFactorResult = () => {\r\n      setLoading(true);\r\n      getRequest(`${test.factorResult}${resultId}`)\r\n        .then((res) => {\r\n          form.setFieldsValue(res.data);\r\n        })\r\n        .catch((error) => {\r\n          message.error(`Алдаа гарлаа. ${error.Message}`);\r\n        })\r\n        .finally(() => setLoading(false));\r\n    };\r\n\r\n    if (resultId !== null) getFactorResult();\r\n    // eslint-disable-next-line\r\n  }, [resultId]);\r\n\r\n  const onSubmit = async () => {\r\n    form\r\n      .validateFields()\r\n      .then(async (values) => {\r\n        setLoading(true);\r\n        if (resultId) {\r\n          await putRequest(test.factorResult, {\r\n            ...values,\r\n            factorId: factorId,\r\n            resultId: resultId,\r\n          });\r\n        } else {\r\n          await postRequest(test.factorResult, {\r\n            ...values,\r\n            factorId: factorId,\r\n          });\r\n        }\r\n        message.success(\"Амжилттай хадгаллаа.\");\r\n        refreshTable();\r\n        setLoading(false);\r\n        handleClose();\r\n      })\r\n      .catch((error) => {\r\n        message.error(error.Message);\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  const setInitial = () => {\r\n    handleClose();\r\n    form.resetFields();\r\n  };\r\n\r\n  return (\r\n    <Drawer\r\n      visible={visible}\r\n      title={\r\n        resultId ? \"Хүчин зүйлийн үр дүн засах\" : \"Хүчин зүйлийн үр дүн нэмэх\"\r\n      }\r\n      placement={\"right\"}\r\n      closable={false}\r\n      onClose={setInitial}\r\n      width={400}\r\n      footer={\r\n        <div style={{ textAlign: \"right\" }}>\r\n          <CustomButton onClick={() => onSubmit()} />\r\n        </div>\r\n      }\r\n      key={\"factor\"}\r\n    >\r\n      <Skeleton loading={loading}>\r\n        <Form\r\n          layout=\"vertical\"\r\n          hideRequiredMark\r\n          // size=\"small\"\r\n          scrollToFirstError\r\n          form={form}\r\n        >\r\n          <Row justify=\"center\" gutter={32}>\r\n            <FormItem label=\"Тайлбар\" name={\"desc\"} required />\r\n            <FormItem\r\n              label=\"Доод оноо\"\r\n              name={\"scoreMin\"}\r\n              itemType=\"number\"\r\n              required\r\n            />\r\n            <FormItem\r\n              label=\"Дээд оноо\"\r\n              name={\"scoreMax\"}\r\n              itemType=\"number\"\r\n              required\r\n            />\r\n          </Row>\r\n        </Form>\r\n      </Skeleton>\r\n    </Drawer>\r\n  );\r\n}\r\n\r\nexport default FactorResultForm;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Table, Popconfirm, Tag, message } from \"antd\";\r\nimport { getRequest, deleteRequest } from \"api\";\r\nimport { test } from \"api/endpoints\";\r\nimport { CustomTable, TableHeader } from \"components\";\r\nimport { DeleteOutlined, EditOutlined } from \"@ant-design/icons\";\r\nimport FactorResultForm from \"./FactorResultForm\";\r\n\r\nfunction FactorResultList({ factorId }) {\r\n  const [refresh, setRefresh] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [factorResults, setFactorResults] = useState([]);\r\n  const [modalData, setModalData] = useState({\r\n    visible: false,\r\n    resultId: null,\r\n  });\r\n\r\n  useEffect(() => {\r\n    const getFactorResults = () => {\r\n      setLoading(true);\r\n      getRequest(test.factorResults, {\r\n        factorId: factorId,\r\n        Pid: 1,\r\n        Psize: 100,\r\n      })\r\n        .then((res) => {\r\n          setFactorResults(res.data.results);\r\n          console.log(res.data.results);\r\n        })\r\n        .catch((error) => {\r\n          message.error(`Алдаа гарлаа. ${error.Message}`);\r\n        })\r\n        .finally(() => setLoading(false));\r\n    };\r\n\r\n    if (factorId !== null) getFactorResults();\r\n  }, [factorId, refresh]);\r\n\r\n  const handleDelete = (id) => {\r\n    deleteRequest(`${test.feelingAnswer}${id}`)\r\n      .then((res) => {\r\n        message.success(\"Мэдээллийг амжилттай устгалаа.\");\r\n        // to fetch data\r\n        setRefresh(!refresh);\r\n      })\r\n      .catch((err) => {\r\n        message.error(`Алдаа гарлаа: ${err.Message}`);\r\n      });\r\n  };\r\n\r\n  const columns = [\r\n    // {\r\n    //   title: \"Код\",\r\n    //   dataIndex: \"resultId\",\r\n    //   width: \"10%\",\r\n    //   align: \"center\",\r\n    // },\r\n    {\r\n      title: \"Тайлбар\",\r\n      dataIndex: \"desc\",\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: \"Доод оноо\",\r\n      dataIndex: \"scoreMin\",\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: \"Дээд оноо\",\r\n      dataIndex: \"scoreMax\",\r\n      align: \"center\",\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div style={{ padding: \"10px 40px\" }}>\r\n      <CustomTable\r\n        title={\"Хүчин зүйлийн үр дүн\"}\r\n        primaryKey={[\"resultId\"]}\r\n        columns={columns}\r\n        endpoint={test.factorResult}\r\n        endpoints={test.factorResults}\r\n        addFunc={() => setModalData({ resultId: null, visible: true })}\r\n        onEdit={(val) => setModalData({ resultId: val, visible: true })}\r\n        otherFilters={{ factorId: factorId }}\r\n        refresh={refresh}\r\n      />\r\n      {/* <Table\r\n        columns={columns}\r\n        dataSource={factorResults}\r\n        rowKey={(record) => record.resultId}\r\n        loading={loading}\r\n        size=\"small\"\r\n        // bordered\r\n        title={() => {\r\n          return (\r\n            <TableHeader\r\n              title=\"Хүчин зүйлийн үр дүн\"\r\n              addFunc={() => {\r\n                setModalData({ resultId: null, visible: true });\r\n              }}\r\n            />\r\n          );\r\n        }}\r\n      /> */}\r\n      <FactorResultForm\r\n        visible={modalData.visible}\r\n        factorId={factorId}\r\n        resultId={modalData.resultId}\r\n        handleClose={() => setModalData({ resultId: null, visible: false })}\r\n        refreshTable={() => setRefresh(!refresh)}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FactorResultList;\r\n"],"names":["visible","handleClose","factorId","refreshTable","testId","Form","form","useState","loading","setLoading","factorType","setFactorType","eStatus","setEStatus","useEffect","getRequest","test","then","res","setFieldsValue","data","catch","error","message","Message","finally","getEFactorTypes","dict","getEStatus","onSubmit","validateFields","values","putRequest","postRequest","title","placement","closable","onClose","resetFields","width","footer","style","textAlign","onClick","layout","hideRequiredMark","scrollToFirstError","justify","gutter","label","name","required","itemType","dtsrc","refresh","setRefresh","factorForm","setFactorForm","columns","dataIndex","render","val","color","primaryKey","endpoint","endpoints","addFunc","onEdit","expandable","expandedRowRender","record","rowKey","resultId","setFactorResults","modalData","setModalData","Pid","Psize","results","console","log","padding","align","otherFilters"],"sourceRoot":""}